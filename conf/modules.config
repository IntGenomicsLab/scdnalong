/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
}

/////////////////////
// REFERENCE FILES //
/////////////////////

// PREPARE_REFERENCE_FILES
process {
    withName: '.*:PREPARE_REFERENCE_FILES:SAMTOOLS_FAIDX' {
        publishDir = [
            enabled: false
        ]
    }
}

// MINIMAP2_INDEX
if (!params.skip_save_minimap2_index) {
    process {
        withName:'.*:MINIMAP2_INDEX' {
            ext.args = {
                [
                    "-ax map-ont",
                    params.save_secondary_alignment == false ? "--secondary=no " : "--secondary=yes "
                ].join(' ').trim()
            }
            publishDir = [
                path: { "${params.outdir}/references/minimap_index" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}


// CAT FASTQ
process {
    withName: '.*:CAT_FASTQ_SAMPLE' {
        publishDir = [
            enabled: false
        ]
    }
}

/////////////
// FILE QC //
/////////////

// FASTQC
if (!params.skip_qc && !params.skip_fastqc) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_FLEXIPLEX:FASTQC' {
            ext.prefix = { "${meta.id}.raw" }
            ext.args = { '--quiet' }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/fastqc/pre_flexi" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }


        withName: '.*:FASTQC_NANOPLOT_POST_FLEXIPLEX:FASTQC' {
            ext.prefix = { "${meta.id}.trimmed" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/fastqc/post_flexi" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
        
    }
}

// NANOPLOT
if (!params.skip_qc && !params.skip_nanoplot) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_FLEXIPLEX:NANOPLOT' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/nanoplot/pre_flexi/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
        
        withName: '.*:FASTQC_NANOPLOT_POST_FLEXIPLEX:NANOPLOT' {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/nanoplot/post_flexi/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
    }
}

// NANOCOMP
if (!params.skip_qc && !params.skip_fastq_nanocomp) {
    process {
        withName: '.*:NANOCOMP_FASTQ' {
            publishDir = [
                path: { "${params.outdir}/batch_qcs/nanocomp/fastq" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
        }
    }
}

if (!params.skip_qc && !params.skip_bam_nanocomp) {
    process {
        withName: '.*:NANOCOMP_BAM' {
            publishDir = [
                path: { "${params.outdir}/batch_qcs/nanocomp/bam" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
        }
    }
}

// TOULLIGQC
if (!params.skip_qc && !params.skip_toulligqc) {
    process {
        withName: '.*:FASTQC_NANOPLOT_PRE_FLEXIPLEX:TOULLIGQC' {
            ext.prefix = { "${meta.id}.raw_" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/toulligqc/pre_flexi/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }

        withName: '.*:FASTQC_NANOPLOT_POST_FLEXIPLEX:TOULLIGQC' {
            ext.prefix = { "${meta.id}.postflexi_" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/toulligqc/post_flexi/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        }
        
    }
}

// SEQKIT STATS
if (!params.skip_qc && !params.skip_seqkit_stats) {
    process {
        withName: '.*:SEQKIT_STATS_PRE' {
            ext.prefix = { "${meta.id}.raw" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/seqkit_stats/pre_flexi/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    process {
        withName: '.*:SEQKIT_STATS_POST' {
            ext.prefix = { "${meta.id}.postflexi" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/seqkit_stats/post_flexi/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

// SAMTOOLS
if (!params.skip_qc){
    process {
        withName:'.*:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/qc/samtools/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

//////////////////////
// FASTQ PROCESSING //
//////////////////////

// SEQKIT_SPLIT
process {
    withName: SEQKIT_SPLIT2 {
    if (params.split_fastq_n != null){
        ext.args = "--by-part ${params.split_fastq_n}"
        }
    publishDir = [
            enabled: false
        ]
    } 
}

///////////////////////
// BARCODE DETECTION //
///////////////////////

// FLEXIPLEX
process {
    withName: '.*RUN_FLEXIPLEX:FLEXIPLEX_DISCOVERY' {
        ext.args = {
            def barcodeArg = ""
            switch (params.barcode_format) {
                case "10x_atac":
                    barcodeArg = '-x "ACCGAGATCTACAC" -b "????????????????" -x "CGCGTCTGTCGTCGGCAGCGTCAGATGTGTATAAGAGACAG" -f 8'
                    break
                //case "10x3v2":
                //    barcodeArg = "-d 10x3v2"
                //    break
            }
            barcodeArg.trim()
        }
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*RUN_FLEXIPLEX:FLEXIPLEX_ASSIGN' {
        ext.args = {
            def barcodeArg = ""
            switch (params.barcode_format) {
                case "10x_atac":
                    barcodeArg = '-x "ACCGAGATCTACAC" -b "????????????????" -x "CGCGTCTGTCGTCGGCAGCGTCAGATGTGTATAAGAGACAG" -f 8'
                    break
                //case "10x3v2":
                //    barcodeArg = "-d 10x3v2"
                //    break
            }
            barcodeArg.trim()
        }
        publishDir = [
            enabled: false
        ]
    }
}

process {
    withName: '.*RUN_FLEXIPLEX:FLEXIPLEX_FILTER' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/flexiplex/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {
    withName: '.*RUN_FLEXIPLEX:CAT_FASTQ_SPLIT' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/flexiplex/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}


// PIGZ UNCOMPRESS
process {
    withName: '.*:RUN_FLEXIPLEX:PIGZ_UNCOMPRESS' {
        publishDir = [        
            enabled: false   
        ]
    }
}

// PIGZ COMPRESS
process {
    withName: '.*:RUN_FLEXIPLEX:PIGZ_COMPRESS' {
        publishDir = [
            enabled: false
        ]
    }
}

///////////////
// ALIGNMENT //
///////////////

// MINIMAP
process {
    withName:'.*:MINIMAP2_ALIGN' {
        ext.args = {
            [
                "-ax map-ont",
                params.save_secondary_alignment == false ? "--secondary=no " : "--secondary=yes "
            ].join(' ').trim()
        }
        publishDir = [
            enabled: false
        ]
    }
}

///////////////////
// DEDUPLICATION //
///////////////////

if (!params.skip_dedup){
    process {
        withName: '.*:PICARD_MARKDUPLICATES' {
            ext.args = { "--BARCODE_TAG=CB" }
            ext.prefix = { "${meta.id}.dedup" }
            publishDir = [
                enabled: false
            ]
        }
    }
}

////////////////////
// BAM PROCESSING //
////////////////////

// FLEXIFORMATTER
process {
    withName:'.*:FLEXIFORMATTER' {
        publishDir = [
            enabled: false
        ]
    }
}

// SAMTOOLS_SORT
process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.dedup.sorted" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// SAMTOOLS_INDEX
process {
    withName:'.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.prefix = { "${meta.id}.dedup.sorted" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/bam/dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//////////////////
// VERSION DUMP //
//////////////////


process {
    withName:'.*:CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/software_versions" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('software_versions_mqc.yml') ||
                        filename.equals('versions.yml') ? null : filename }
        ]
    }
}

/////////////
// MULTIQC //
/////////////

if (!params.skip_qc && !params.skip_multiqc) {
    process {
        withName: '.*:MULTIQC_FINALQC' {
            ext.args = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
            publishDir = [
                path: { "${params.outdir}/batch_qcs/multiqc/final_qc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    process {
        withName: '.*:MULTIQC_RAWQC' {
            ext.args = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
            publishDir = [
                path: { "${params.outdir}/batch_qcs/multiqc/raw_qc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}